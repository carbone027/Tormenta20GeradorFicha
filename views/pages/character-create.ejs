<%- include('../partials/header', { title: 'Criar Personagem', activePage: 'createCharacter' }) %>

<section class="content-section active">
  <h2>✨ Criar Novo Personagem</h2>
  <p style="text-align: center; margin-bottom: 2rem; color: #b8b8b8;">
    Dê vida ao seu herói! Preencha as informações abaixo para criar um personagem único e épico para suas aventuras em Arton.
  </p>

  <form action="/personagens/criar" method="POST" class="character-form" id="characterForm">
    <!-- Informações Básicas -->
    <div class="form-section">
      <h3>📝 Informações Básicas</h3>
      <div class="card">
        <div class="form-grid">
          <div class="form-group">
            <label for="nome">⚔️ Nome do Personagem *</label>
            <input type="text" id="nome" name="nome" required 
                   placeholder="Ex: Alaric Fortaleza, Lyanna Luaverde..." 
                   maxlength="100">
            <small>Escolha um nome que reflita a personalidade e origem do seu herói</small>
          </div>
          
          <div class="form-group">
            <label for="nivel">📊 Nível</label>
            <input type="number" id="nivel" name="nivel" value="1" min="1" max="20" required>
            <small>Nível inicial do personagem (geralmente 1)</small>
          </div>
        </div>
      </div>
    </div>

    <!-- Raça, Classe e Deus -->
    <div class="form-section">
      <h3>🧬 Origem e Vocação</h3>
      <div class="card">
        <div class="form-grid-three">
          <div class="form-group">
            <label for="raca_id">🧝 Raça *</label>
            <select id="raca_id" name="raca_id" required>
              <option value="">Escolha uma raça...</option>
              <% if (racas && racas.length > 0) { %>
                <% racas.forEach(raca => { %>
                  <option value="<%= raca.id %>" data-bonus='<%= JSON.stringify(raca.bonus_atributos) %>'>
                    <%= raca.nome %>
                  </option>
                <% }); %>
              <% } %>
            </select>
            <small>Define características físicas e habilidades raciais</small>
          </div>
          
          <div class="form-group">
            <label for="classe_id">⚔️ Classe *</label>
            <select id="classe_id" name="classe_id" required>
              <option value="">Escolha uma classe...</option>
              <% if (classes && classes.length > 0) { %>
                <% classes.forEach(classe => { %>
                  <option value="<%= classe.id %>" 
                          data-vida="<%= classe.pontos_vida_base %>"
                          data-mana="<%= classe.pontos_mana_base || 0 %>"
                          data-atributo="<%= classe.atributo_principal %>">
                    <%= classe.nome %>
                  </option>
                <% }); %>
              <% } %>
            </select>
            <small>Determina habilidades e papel no grupo</small>
          </div>
          
          <div class="form-group">
            <label for="deus_id">⭐ Deus Patrono</label>
            <select id="deus_id" name="deus_id">
              <option value="">Sem deus específico</option>
              <% if (deuses && deuses.length > 0) { %>
                <% deuses.forEach(deus => { %>
                  <option value="<%= deus.id %>">
                    <%= deus.nome %> - <%= deus.dominio %>
                  </option>
                <% }); %>
              <% } %>
            </select>
            <small>Divindade que seu personagem venera (opcional)</small>
          </div>
        </div>
      </div>
    </div>

    <!-- Atributos -->
    <div class="form-section">
      <h3>💪 Atributos</h3>
      <div class="card">
        <div class="atributos-info">
          <p>📋 <strong>Distribuição de Pontos:</strong> Você tem <span id="pontosRestantes">27</span> pontos para distribuir entre os atributos. Cada atributo começa em 8.</p>
          <p>💡 <strong>Dica:</strong> Foque no atributo principal da sua classe para maior efetividade!</p>
        </div>
        
        <div class="atributos-grid">
          <div class="atributo-card">
            <label for="forca">💪 Força</label>
            <div class="atributo-controls">
              <button type="button" class="attr-btn minus" data-attr="forca">-</button>
              <input type="number" id="forca" name="forca" value="8" min="8" max="15" readonly>
              <button type="button" class="attr-btn plus" data-attr="forca">+</button>
            </div>
            <small>Força física, ataques corpo a corpo</small>
            <div class="bonus-display" id="bonus-forca">+0</div>
          </div>
          
          <div class="atributo-card">
            <label for="destreza">🏃 Destreza</label>
            <div class="atributo-controls">
              <button type="button" class="attr-btn minus" data-attr="destreza">-</button>
              <input type="number" id="destreza" name="destreza" value="8" min="8" max="15" readonly>
              <button type="button" class="attr-btn plus" data-attr="destreza">+</button>
            </div>
            <small>Agilidade, ataques à distância</small>
            <div class="bonus-display" id="bonus-destreza">+0</div>
          </div>
          
          <div class="atributo-card">
            <label for="constituicao">❤️ Constituição</label>
            <div class="atributo-controls">
              <button type="button" class="attr-btn minus" data-attr="constituicao">-</button>
              <input type="number" id="constituicao" name="constituicao" value="8" min="8" max="15" readonly>
              <button type="button" class="attr-btn plus" data-attr="constituicao">+</button>
            </div>
            <small>Resistência, pontos de vida</small>
            <div class="bonus-display" id="bonus-constituicao">+0</div>
          </div>
          
          <div class="atributo-card">
            <label for="inteligencia">🧠 Inteligência</label>
            <div class="atributo-controls">
              <button type="button" class="attr-btn minus" data-attr="inteligencia">-</button>
              <input type="number" id="inteligencia" name="inteligencia" value="8" min="8" max="15" readonly>
              <button type="button" class="attr-btn plus" data-attr="inteligencia">+</button>
            </div>
            <small>Raciocínio, magia arcana</small>
            <div class="bonus-display" id="bonus-inteligencia">+0</div>
          </div>
          
          <div class="atributo-card">
            <label for="sabedoria">🧙 Sabedoria</label>
            <div class="atributo-controls">
              <button type="button" class="attr-btn minus" data-attr="sabedoria">-</button>
              <input type="number" id="sabedoria" name="sabedoria" value="8" min="8" max="15" readonly>
              <button type="button" class="attr-btn plus" data-attr="sabedoria">+</button>
            </div>
            <small>Percepção, magia divina</small>
            <div class="bonus-display" id="bonus-sabedoria">+0</div>
          </div>
          
          <div class="atributo-card">
            <label for="carisma">😎 Carisma</label>
            <div class="atributo-controls">
              <button type="button" class="attr-btn minus" data-attr="carisma">-</button>
              <input type="number" id="carisma" name="carisma" value="8" min="8" max="15" readonly>
              <button type="button" class="attr-btn plus" data-attr="carisma">+</button>
            </div>
            <small>Personalidade, liderança</small>
            <div class="bonus-display" id="bonus-carisma">+0</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Características Derivadas -->
    <div class="form-section">
      <h3>📊 Características Derivadas</h3>
      <div class="card">
        <div class="form-grid-three">
          <div class="form-group">
            <label for="pontos_vida">❤️ Pontos de Vida</label>
            <input type="number" id="pontos_vida" name="pontos_vida" value="0" min="1" required readonly>
            <small>Calculado automaticamente baseado na classe e Constituição</small>
          </div>
          
          <div class="form-group">
            <label for="pontos_mana">🔵 Pontos de Mana</label>
            <input type="number" id="pontos_mana" name="pontos_mana" value="0" min="0" readonly>
            <small>Para classes que usam magia</small>
          </div>
          
          <div class="form-group">
            <label for="ca">🛡️ Classe de Armadura</label>
            <input type="number" id="ca" name="ca" value="10" min="10" readonly>
            <small>10 + modificador de Destreza (pode ser alterado por equipamentos)</small>
          </div>
        </div>
        
        <div class="form-group">
          <label for="experiencia">⭐ Experiência</label>
          <input type="number" id="experiencia" name="experiencia" value="0" min="0">
          <small>Pontos de experiência acumulados (opcional)</small>
        </div>
      </div>
    </div>

    <!-- Background e Roleplay -->
    <div class="form-section">
      <h3>🎭 História e Personalidade</h3>
      <div class="card">
        <div class="form-group">
          <label for="historia_pessoal">📜 História Pessoal</label>
          <textarea id="historia_pessoal" name="historia_pessoal" rows="4" 
                    placeholder="Descreva a origem, família, eventos marcantes da vida do personagem..."></textarea>
          <small>Onde nasceu? Como cresceu? O que o motivou a se tornar um aventureiro?</small>
        </div>
        
        <div class="form-group">
          <label for="personalidade">🎭 Personalidade</label>
          <textarea id="personalidade" name="personalidade" rows="3" 
                    placeholder="Corajoso, sarcástico, tímido, arrogante... Como seu personagem se comporta?"></textarea>
          <small>Traços de personalidade, maneirismos, medos, vícios...</small>
        </div>
        
        <div class="form-group">
          <label for="objetivos">🎯 Objetivos e Motivações</label>
          <textarea id="objetivos" name="objetivos" rows="3" 
                    placeholder="O que seu personagem busca? Vingança? Conhecimento? Riqueza? Justiça?"></textarea>
          <small>O que move seu personagem? Quais são seus sonhos e ambições?</small>
        </div>
      </div>
    </div>

    <!-- Preview do Personagem -->
    <div class="form-section">
      <h3>👁️ Preview do Personagem</h3>
      <div class="card character-preview" id="characterPreview">
        <div class="preview-content">
          <div class="preview-header">
            <h4 id="previewNome">Nome do Personagem</h4>
            <p id="previewClasseRaca">Classe Raça - Nível 1</p>
          </div>
          
          <div class="preview-stats">
            <div class="preview-atributos">
              <h5>Atributos</h5>
              <div class="attrs-preview" id="attrsPreview">
                <!-- Preenchido via JavaScript -->
              </div>
            </div>
            
            <div class="preview-derivadas">
              <h5>Características</h5>
              <div class="derivadas-preview" id="derivadasPreview">
                <!-- Preenchido via JavaScript -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Botões de Ação -->
    <div class="form-actions">
      <button type="submit" class="nav-btn">🎨 Criar Personagem</button>
      <a href="/personagens" class="btn btn-secondary">📋 Meus Personagens</a>
      <button type="button" class="btn btn-secondary" id="resetForm">🔄 Resetar</button>
    </div>
  </form>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let pontosDisponiveis = 27;
  const custoPorPonto = { 8: 0, 9: 1, 10: 2, 11: 3, 12: 4, 13: 5, 14: 7, 15: 9 };
  
  // Elementos do DOM
  const pontosRestantesEl = document.getElementById('pontosRestantes');
  const atributos = ['forca', 'destreza', 'constituicao', 'inteligencia', 'sabedoria', 'carisma'];
  
  // Atualizar preview e cálculos
  function atualizarCalculos() {
    // Atualizar pontos restantes
    let pontosUsados = 0;
    atributos.forEach(attr => {
      const valor = parseInt(document.getElementById(attr).value);
      pontosUsados += custoPorPonto[valor];
      
      // Atualizar modificador
      const modificador = Math.floor((valor - 10) / 2);
      document.getElementById('bonus-' + attr).textContent = modificador >= 0 ? '+' + modificador : modificador;
    });
    
    pontosDisponiveis = 27 - pontosUsados;
    pontosRestantesEl.textContent = pontosDisponiveis;
    
    // Atualizar botões
    atributos.forEach(attr => {
      const input = document.getElementById(attr);
      const valor = parseInt(input.value);
      const btnMinus = input.parentNode.querySelector('.minus');
      const btnPlus = input.parentNode.querySelector('.plus');
      
      btnMinus.disabled = valor <= 8;
      
      if (valor >= 15) {
        btnPlus.disabled = true;
      } else {
        const custoProximo = custoPorPonto[valor + 1] - custoPorPonto[valor];
        btnPlus.disabled = pontosDisponiveis < custoProximo;
      }
    });
    
    // Calcular características derivadas
    calcularCaracteristicasDerivadas();
    atualizarPreview();
  }
  
  // Calcular PV, PM, CA
  function calcularCaracteristicasDerivadas() {
    const classeSelect = document.getElementById('classe_id');
    const constituicao = parseInt(document.getElementById('constituicao').value);
    const destreza = parseInt(document.getElementById('destreza').value);
    const nivel = parseInt(document.getElementById('nivel').value) || 1;
    
    if (classeSelect.selectedOptions.length > 0) {
      const option = classeSelect.selectedOptions[0];
      const vidaBase = parseInt(option.dataset.vida) || 0;
      const manaBase = parseInt(option.dataset.mana) || 0;
      
      // Calcular PV
      const modCon = Math.floor((constituicao - 10) / 2);
      const pv = vidaBase + modCon + ((nivel - 1) * (Math.floor(vidaBase / 4) + modCon));
      document.getElementById('pontos_vida').value = Math.max(1, pv);
      
      // Calcular PM
      if (manaBase > 0) {
        const pm = manaBase + ((nivel - 1) * Math.floor(manaBase / 4));
        document.getElementById('pontos_mana').value = pm;
      } else {
        document.getElementById('pontos_mana').value = 0;
      }
    }
    
    // Calcular CA
    const modDes = Math.floor((destreza - 10) / 2);
    document.getElementById('ca').value = 10 + modDes;
  }
  
  // Atualizar preview
  function atualizarPreview() {
    const nome = document.getElementById('nome').value || 'Nome do Personagem';
    const racaSelect = document.getElementById('raca_id');
    const classeSelect = document.getElementById('classe_id');
    const nivel = document.getElementById('nivel').value || 1;
    
    let classeNome = 'Classe';
    let racaNome = 'Raça';
    
    if (classeSelect.selectedOptions.length > 0) {
      classeNome = classeSelect.selectedOptions[0].textContent;
    }
    
    if (racaSelect.selectedOptions.length > 0) {
      racaNome = racaSelect.selectedOptions[0].textContent;
    }
    
    document.getElementById('previewNome').textContent = nome;
    document.getElementById('previewClasseRaca').textContent = `${classeNome} ${racaNome} - Nível ${nivel}`;
    
    // Atualizar atributos no preview
    const attrsPreview = document.getElementById('attrsPreview');
    attrsPreview.innerHTML = '';
    
    atributos.forEach(attr => {
      const valor = document.getElementById(attr).value;
      const modificador = document.getElementById('bonus-' + attr).textContent;
      const nome = attr.charAt(0).toUpperCase() + attr.slice(1);
      
      const div = document.createElement('div');
      div.className = 'attr-preview';
      div.innerHTML = `
        <span class="label">${nome}:</span>
        <span class="value">${valor} (${modificador})</span>
      `;
      attrsPreview.appendChild(div);
    });
    
    // Atualizar características derivadas no preview
    const derivadasPreview = document.getElementById('derivadasPreview');
    derivadasPreview.innerHTML = '';
    
    const derivadas = [
      { label: 'Pontos de Vida', value: document.getElementById('pontos_vida').value },
      { label: 'Pontos de Mana', value: document.getElementById('pontos_mana').value },
      { label: 'Classe de Armadura', value: document.getElementById('ca').value }
    ];
    
    derivadas.forEach(item => {
      const div = document.createElement('div');
      div.className = 'stat-preview';
      div.innerHTML = `
        <span class="label">${item.label}:</span>
        <span class="value">${item.value}</span>
      `;
      derivadasPreview.appendChild(div);
    });
  }
  
  // Event listeners para atributos
  document.querySelectorAll('.attr-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const attr = this.dataset.attr;
      const input = document.getElementById(attr);
      const valor = parseInt(input.value);
      
      if (this.classList.contains('plus') && valor < 15) {
        const custoProximo = custoPorPonto[valor + 1] - custoPorPonto[valor];
        if (pontosDisponiveis >= custoProximo) {
          input.value = valor + 1;
        }
      } else if (this.classList.contains('minus') && valor > 8) {
        input.value = valor - 1;
      }
      
      atualizarCalculos();
    });
  });
  
  // Event listeners para selects
  document.getElementById('classe_id').addEventListener('change', function() {
    atualizarCalculos();
    
    // Destacar atributo principal
    document.querySelectorAll('.atributo-card').forEach(card => {
      card.classList.remove('principal');
    });
    
    if (this.selectedOptions.length > 0) {
      const atributoPrincipal = this.selectedOptions[0].dataset.atributo;
      if (atributoPrincipal) {
        const card = document.getElementById(atributoPrincipal.toLowerCase()).closest('.atributo-card');
        if (card) card.classList.add('principal');
      }
    }
  });
  
  document.getElementById('raca_id').addEventListener('change', atualizarCalculos);
  document.getElementById('nivel').addEventListener('input', atualizarCalculos);
  document.getElementById('nome').addEventListener('input', atualizarPreview);
  
  // Reset form
  document.getElementById('resetForm').addEventListener('click', function() {
    if (confirm('Tem certeza que deseja resetar o formulário? Todos os dados serão perdidos.')) {
      document.getElementById('characterForm').reset();
      atributos.forEach(attr => {
        document.getElementById(attr).value = 8;
      });
      atualizarCalculos();
    }
  });
  
  // Inicializar
  atualizarCalculos();
});
</script>

<%- include('../partials/footer') %>